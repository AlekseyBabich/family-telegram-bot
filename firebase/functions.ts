// firebase/functions.ts
import { onRequest } from "firebase-functions/v2/https";
import * as logger from "firebase-functions/logger";
import { Telegraf, Markup } from "telegraf";
import type { Update } from "telegraf/types";

const {
  BOT_TOKEN,
  BOT_USERNAME, // –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º
  FAMILY_CHAT_ID,
  WEBAPP_BASE_URL,
  WEBAPP_SHOPPING_URL,
  WEBAPP_CALENDAR_URL,
  WEBAPP_BUDGET_URL,
  NOTIFY_API_KEY,
} = process.env;

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–ø—Ü–∏–π (username —Å—é–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç)
const bot = BOT_TOKEN ? new Telegraf<Update>(BOT_TOKEN) : (null as unknown as Telegraf<Update>);

// –ö–Ω–æ–ø–∫–∏ –≤–µ–±-–∞–ø–ø–æ–≤
const menu = () =>
  Markup.inlineKeyboard([
    [Markup.button.webApp("üõí –ü–æ–∫—É–ø–∫–∏", WEBAPP_SHOPPING_URL || `${WEBAPP_BASE_URL}/#/shopping`)],
    [Markup.button.webApp("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", WEBAPP_CALENDAR_URL || `${WEBAPP_BASE_URL}/#/calendar`)],
    [Markup.button.webApp("üí∞ –ë—é–¥–∂–µ—Ç", WEBAPP_BUDGET_URL || `${WEBAPP_BASE_URL}/#/budget`)],
  ]);

// –•—ç–Ω–¥–ª–µ—Ä—ã
if (BOT_TOKEN) {
  bot.start(async (ctx) => ctx.reply("–°–µ–º–µ–π–Ω—ã–π –±–æ—Ç ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", menu()));
  bot.hears(/–º–µ–Ω—é|menu|–≥–ª–∞–≤–Ω–æ–µ/i, async (ctx) => ctx.reply("–ú–µ–Ω—é:", menu()));
}

// HTTPS-–≤–µ–±—Ö—É–∫ Telegram
export const telegramBot = onRequest({ cors: true }, async (req, res) => {
  if (!BOT_TOKEN) return res.status(500).send("Bot is not configured");
  const callback = bot.webhookCallback("/");
  return callback(req as any, res as any);
});

// –ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ —Ñ—Ä–æ–Ω—Ç–∞
export const notify = onRequest({ cors: true }, async (req, res) => {
  try {
    if (req.method !== "POST") return res.status(405).send("Method Not Allowed");
    if (!BOT_TOKEN || !FAMILY_CHAT_ID) return res.status(500).send("Server not configured");

    const apiKey = req.header("x-api-key") || req.header("X-API-KEY");
    if (!apiKey || apiKey !== NOTIFY_API_KEY) return res.status(401).send("Unauthorized");

    const { text } = (req.body || {}) as { text?: string };
    const msg = (text || "").trim();
    if (!msg) return res.status(400).send("Text is required");

    await bot.telegram.sendMessage(FAMILY_CHAT_ID, msg);
    res.status(200).send({ ok: true });
  } catch (e) {
    logger.error("notify error", e);
    res.status(500).send("Internal error");
  }
});
